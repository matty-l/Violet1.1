package GUI.Window.Utility;

import GUI.Window.GuiWindow;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableMap;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.TextField;

/**
 * This class facilitates refactoring.
 * Created by Matt Levine on 4/24/14.
 */
public class RefactorDialog extends UtilWindow{

    private final SimpleStringProperty text = new SimpleStringProperty();

    /** Constructs a new Refactor Dialog. There should not,
     * in normal usage, be more than one of these, though nothing
     * particularly bad will result from doing so.
     */
   public RefactorDialog(){
       super("Refactor Dialog",200,100);
   }

    /** Opens dialog for refactoring the given string
     * @param s the text to refactor
     */
    public final void refactor(String s){ ((TextField)root.getCenter()).setText(s); }

    /** Returns the string property generated by the dialog
     * @return output the string property
     */
    public SimpleStringProperty getOutput(){return text;}

    /** Adds the widgets to the dialog **/
    @Override protected void addWidgets(){
        super.addWidgets();
        root.setStyle("-fx-background-color: #D6D6D6;");

        TextField refacEntry = new TextField();
        refacEntry.setPrefHeight(20);
        refacEntry.setPrefWidth(200);
        refacEntry.textProperty().addListener((observable, oldValue, newValue) -> {
            text.set(newValue);
        });

        root.setCenter(refacEntry);
    }


    /** Does nothing (when closed) **/
    @Override protected void setCloseConditions() {}

    /** Focuses on the refactoring entry **/
    public void focusInput(){root.getCenter().requestFocus();}

    public TextField getEntry() {
        return (TextField) root.getCenter();
    }
}
